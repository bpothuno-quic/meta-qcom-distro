#
# This file is your local configuration file and is where all local user settings
# are placed. The comments in this file give some guide to the options a new user
# to the system might want to change but pretty much any configuration option can
# be set in this file. More adventurous users can look at local.conf.extended
# which contains other examples of configuration which can be placed in this file
# but new users likely don't need any of them initially.
#
# Lines starting with the '#' character are commented out and in some cases the
# default values are provided as comments to show people example syntax. Enabling
# the option is a question of removing the # character and making any change to the
# variable as required.

# CONF_VERSION is increased each time build/conf/ changes incompatibly
CONF_VERSION = "2"

# Which files do we want to parse:
BBMASK = ""

# What kind of images do we want?
IMAGE_FSTYPES:append = " tar.xz"

# Don't generate the mirror tarball for SCM repos, the snapshot is enough
BB_GENERATE_MIRROR_TARBALLS = "0"

# Disable build time patch resolution. This would lauch a devshell
# and wait for manual intervention. We disable it.
PATCHRESOLVE = "noop"

# Parallelism Options
# These options control how much parallelism BitBake should use.
#

# Capture the count of cpu cores available from the host with a max cap at 20.
CPU_COUNT = "${@oe.utils.cpu_count(at_least=2, at_most=20)}"

# Determines how many tasks bitbake should run in parallel.
BB_NUMBER_THREADS ?= "${CPU_COUNT}"

# Determines how many tasks bitbake should run in parallel during parsing.
BB_NUMBER_PARSE_THREADS ?= "${@oe.utils.cpu_count()}"

# Specifies a maximum CPU pressure threshold for bitbake scheduler to start new tasks.
BB_PRESSURE_MAX_CPU = "900000"

# Specifies a maximum IO pressure threshold for bitbake scheduler to start new tasks.
BB_PRESSURE_MAX_IO = "900000"

# Specifies a maximum Memory pressure threshold for bitbake scheduler to start new tasks.
BB_PRESSURE_MAX_MEMORY = "900000"

# Determines how many processes make should run in parallel when running compile tasks.
PARALLEL_MAKE ?= "-j ${CPU_COUNT} -l ${CPU_COUNT}"
